/******/

// webpackBootstrap

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// Load entry module and return exports

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

/************************************************************************/

/* 0 */

/***/

// extracted by mini-css-extract-plugin

/* 1 */

// CONCATENATED MODULE: ./node_modules/raw-loader/dist/cjs.js!./src/assets/theatre-screen.svg

/* harmony default export */

// EXTERNAL MODULE: ./src/hall-plan.scss

// CONCATENATED MODULE: ./src/main.ts

/** @class */

// CONCATENATED MODULE: ./src/helpers.ts

/**
     * Releases the resources taken by the widget.
     */

/**
     * Returns number of rows.
     */

/**
     * Returns number of seats in the row.
     *
     * @param {integer} row Row number starting from 1.
     */

/**
     * Returns total number of seats in the hall.
     *
     * @return {integer} Number of seats in the hall.
     */

/**
     * Returns the list of the states of the seat.
     *
     * @param {integer} row Row number starting from 1.
     * @param {integer} seat Seat number starting from 1.
     */

/**
     * Sets the list of the states of the seat.
     *
     * @param {integer} row Row number starting from 1.
     * @param {integer} seat Seat number starting from 1.
     * @param {string[]} states New state list.
     */

/**
     * Determines whether the seat has the specified state.
     *
     * @param {integer} row Row number starting from 1.
     * @param {integer} seat Seat number starting from 1.
     * @param {string} state New state name.
     */

/**
     * Sets the state to the seat.
     *
     * @param {integer} row Row number starting from 1.
     * @param {integer} seat Seat number starting from 1.
     * @param {string} state New state name.
     */

/**
     * Unsets the state to the seat.
     *
     * @param {integer} row Row number starting from 1.
     * @param {integer} seat Seat number starting from 1.
     * @param {string} state New state name.
     */

/**
     * Toggles the state to the seat.
     *
     * @param {integer} row Row number starting from 1.
     * @param {integer} seat Seat number starting from 1.
     * @param {string} state State name.
     */

/**
     * Returns the position of active (selected) seat or null if no seat is active.
     */

/**
     * Checks whether the seat at the specified position is active.
     */

/**
     * Sets the seat active / inactive (i.e. selected or not).
     */

// Deactivate the former one

// Activate the new one

// Update internal state

/**
     * Returns maximum seat count in row.
     */

/**
     * Renders the hall scheme as DOM.
     *
     * @return {HTMLDivElement} Root DOM element of the widget.
     */

/**
     * @param {integer} row Row number starting from 1.
     */

// Render offsets as invisible seats holding space.

// This method allows configuring sizes in CSS.

// Render seats

// Render spacing at the end
